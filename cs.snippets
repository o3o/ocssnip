priority -50
# ------------------
# Language
# ------------------

snippet vd "void" i
void 
endsnippet

snippet len "length (len)" i
length
endsnippet

snippet with "With" w
"${1:/*format string*/}".With(${0:/*values*/})
endsnippet

snippet nimp "NotImplementedException" b
throw new System.NotImplementedException("Not implemented.");
endsnippet

snippet obsolete "Obsolete" b
[System.Obsolete("Please use ${1} instead.")]
endsnippet


snippet ret "return" w
return 
endsnippet

snippet rett "return value" w
return ${1};
endsnippet

snippet ro "readonly" w
readonly 
endsnippet

snippet pr "private readonly" b
private readonly 
endsnippet

snippet pub "public" b
public 
endsnippet

snippet pubv "public void" b
public void 
endsnippet

snippet sys "System" i
System.
endsnippet

snippet priv "private" i
private 
endsnippet

snippet th "this" i
this.
endsnippet

#########################
#  classes and structs  #
#########################

snippet class "class" w
public class ${1:MyClass} {
	$0
}
endsnippet

snippet struct "struct" w
public struct ${1:MyStruct} {
	$0
}
endsnippet

snippet interface "interface" w
public interface I${1:Interface} {
	$0
}
endsnippet

snippet enum "enumeration" b
enum ${1:MyEnum} {
	${2:Item}
};
endsnippet


############
#  Main()  #
############
snippet imain "static int main" b
public static int Main(string[] args) {
	$0
}
endsnippet

snippet main "static void main" b
public static void Main(string[] args) {
	$0
}
endsnippet


################
#  properties  #
################
snippet getset "Simple property declaration" b
public ${1:int} ${2:MyProperty} { get; set; }
endsnippet

snippet getsetfull "Full property declaration" b
private ${1:int} ${2:_myProperty};

public $1 ${3:MyProperty} {
	get { return $2; }
	set { $2 = value; }
}
endsnippet

snippet get "Property with a private setter" b
public ${1:int} ${2:MyProperty} { get; private set; }
endsnippet

#############
# Contracts #
#############
snippet req "Guard condition"
Requires.IsNotNull(${1:var}, "$1");
this.$1 = $1;
endsnippet

snippet reqn "Requires not null" b
Requires.IsNotNull(${1:var}, "$1");
endsnippet

snippet reqne "Requires not null or empty" b
Requires.IsNotNullOrEmpty(${1:var}, "$1");
endsnippet

snippet reqt "Requires that" b
Requires.That(${1:cond}, "$1");

endsnippet

snippet ensn "Ensures not null" b
Ensures.IsNotNull(${1:var}, "$1");
endsnippet

snippet ensne "Ensures not null or empty" b
Ensures.IsNotNullOrEmpty(${1:var}, "$1");
endsnippet

snippet enst "Ensures that" b
Ensures.That(${1:cond}, "$1");
endsnippet

snippet ensnr "Ensures not reached" b
Ensures.NotReached();
endsnippet

# ------------------
# Should
# ------------------
snippet seq "shouldEqual (seq)" w
ShouldEqual(${1:/*to*/});
endsnippet


snippet sneq "shouldNotEqual (sneq)" w
ShouldNotEqual(${1:/*to*/});
endsnippet

snippet st "shouldBeTrue (st)" w
ShouldBeTrue;
endsnippet

snippet sf "shouldBeFalse (sf)" w
ShouldBeFalse;
endsnippet

snippet sn "shouldBeNull (sn)" w
ShouldBeNull;
endsnippet

snippet snn "shouldNotBeNull (snn)" w
ShouldNotBeNull;
endsnippet


############
#  events  #
############
snippet event
public event System.EventHandler ${1:name};
protected virtual void On$1(System.EventArgs e) {
	var handler = $1;
	if (handler != null) {
		handler(this, e);
	}
}
endsnippet

snippet eventh "EventHandler" b
event System.EventHandler ${1:name};
endsnippet

snippet evente "EventArgs.Empty" i
System.EventArgs.Empty
endsnippet


###########
# string  #
###########
# prefisso str
snippet strf "Format" i
string.Format(${1:string})
endsnippet

snippet strne "IsNullOrEmpty" i
string.IsNullOrEmpty(${1:string})
endsnippet

snippet strnne "IsNotNullOrEmpty" i
!string.IsNullOrEmpty(${1:string})
endsnippet

snippet ts "ToString" i
ToString()
endsnippet

snippet stre "string.Empty" w
string.Empty
endsnippet


###########
# log4net #
###########
snippet log
private static readonly log4net.ILog log =
	log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
endsnippet

snippet logd
if (log.IsDebugEnabled) log.Debug("${1:msg}");
endsnippet

snippet logdf 
if (log.IsDebugEnabled) log.DebugFormat("${1:msg}");
endsnippet

snippet logi
if (log.IsInfoEnabled) log.Info("${1:msg}");
endsnippet

snippet logif
if (log.IsInfoEnabled) log.InfoFormat("${1:msg}");
endsnippet

snippet logw
if (log.IsWarnEnabled) log.Warn("${1:msg}");
endsnippet

snippet logwf
if (log.IsWarnEnabled) log.WarnFormat("${1:msg}");
endsnippet

snippet loge
if (log.IsErrorEnabled) log.Error("${1:msg}");
endsnippet

snippet logef
if (log.IsErrorEnabled) log.ErrorFormat("${1:msg}");
endsnippet

snippet logf
if (log.IsFatalEnabled) log.Fatal("${1:msg}");
endsnippet

snippet logff
if (log.IsFatalEnabled) log.FatalFormat("${1:msg}");
endsnippet


###########
#  loops  #
###########
snippet for "for (for)" b
for (${4:size_t} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0:/*code*/}
}
endsnippet

snippet fori "for (int i...) (fori)" b
for (int i = 0; i < ${1:count}; ++i) {
	${VISUAL}${0:/*code*/}
}
endsnippet

snippet fore "foreach loop" b
foreach (${3:var} ${2:item} in ${1:items}) {
	${VISUAL}$0
}
endsnippet

snippet wh "while loop" b
while (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet do "do loop" b
do {
	${VISUAL}$0
} while (${1:true});
endsnippet


###############
#  branching  #
###############
snippet if "if ()" b
if (${1:/*condition*/}) {
	${VISUAL}${2:/*code*/}
}
${3}
endsnippet
snippet ife "if else statement" b
if ($1) {
	${VISUAL}$2
} else {
	$3
}
endsnippet

snippet elif "else if" w
else if ($1) {
	$0
}
endsnippet

snippet if!n "if not null" b
if ($1 != null) {
	${VISUAL}$0
}
endsnippet

snippet ifne "if null or empty" b
if (string.IsNullOrEmpty(${1:string})) {
	${VISUAL}$0
}
endsnippet

snippet ifnne "if not null or empty" b
if (!string.IsNullOrEmpty(${1:string})) {
	${VISUAL}$0
}
endsnippet

snippet switch "switch statement" b
switch (${1:statement}) {
	case ${2:value}:
		break;

	default:
		$0break;
}
endsnippet

snippet case "case" b
case ${1:value}:
	$2
	break;
endsnippet


##############
#  wrappers  #
##############
snippet using "using statement" b
using (${1:resource}) {
	${VISUAL}$0
}
endsnippet

snippet unchecked "unchecked block" b
unchecked {
	${VISUAL}$0
}
endsnippet

snippet checked "checked block" b
checked {
	${VISUAL}$0
}
endsnippet

snippet unsafe "unsafe" b
unsafe {
	${VISUAL}$0
}
endsnippet


########################
#  exception handling  #
########################
snippet try "try catch block" b
try {
	${VISUAL}$0
} catch (${1:System.Exception} ${2:ex}) {
	throw;
}
endsnippet

snippet tryf "try finally block" b
try {
	${VISUAL}$0
} finally {
}
endsnippet

snippet throw "throw"
throw new ${1}Exception("${2}");
endsnippet


##########
#  LINQ  #
##########

snippet from "LINQ syntax" b
var ${1:seq} =
	from ${2:item1} in ${3:items1}
	join ${4:item2} in ${5:items2} on $2.${6:prop1} equals $4.${7:prop2}
	select ${8:$2.prop3}
	where ${9:clause}
endsnippet


############################
#  feedback and debugging  #
############################
snippet wr "Console.WriteLine" b
System.Console.WriteLine("$1");
endsnippet

# as you first type comma-separated parameters on the right, {n} values appear in the format string
snippet wrf "Console.WriteLine with parameters" b
System.Console.WriteLine("${2:`!p
snip.rv = ' '.join(['{' + str(i) + '}' for i in range(t[1].count(','))])
`}"${1:, something});
endsnippet

snippet mbox "Message box" b
MessageBox.Show("${1:message}");
endsnippet

##############
#   NUnit    #
##############
snippet ass "Assert that" b
Assert.That(${1:actual}, Is.EqualTo(${2:expected}));
endsnippet

snippet uth "Assert that" b
Assert.That(${1:actual}, Is.EqualTo(${2:expected}));
endsnippet

snippet ufix "Test fixture" b
[TestFixture]
endsnippet

snippet utest "Test" b
[Test]
endsnippet

snippet utestcase "Test case" b
[TestCase(${1:args})]
endsnippet

snippet ucul "Set culture" b
[SetCulture("it-IT")]
endsnippet

snippet uex "Explicit" b
[Explicit]
endsnippet

snippet uign "Ignore" b
[Ignore("${1:why}")]
endsnippet

snippet uthrow "Assert throw" b
Assert.Throws<${1:exception}>(() => ${2:method});
endsnippet

snippet uempty "Is empty" b
Assert.That(${1:string}, Is.Empty);
endsnippet

snippet unempty "Is not empty" b
Assert.That(${1:string}, Is.Not.Empty);
endsnippet

snippet unull "Is null" b
Assert.That(${1:obj}, Is.Null);
endsnippet

snippet unnull "Is not null" b
Assert.That(${1:obj}, Is.Not.Null);
endsnippet

snippet ugt "Is greater than" b
Assert.That(${1}, Is.GreaterThan(${2}));
endsnippet

snippet ugte "Is greater than or equal" b
Assert.That(${1}, Is.GreaterThanOrEqualTo(${2}));
endsnippet

snippet ult "Is less than" b
Assert.That(${1}, Is.LessThan(${2}));
endsnippet

snippet ulte "Is less than or equal" b
Assert.That(${1}, Is.LessThanOrEqualTo(${2}));
endsnippet

snippet ut "Is true" b
Assert.That(${1}, Is.True);
endsnippet

snippet uf "Is false" b
Assert.That(${1}, Is.False);
endsnippet

#####################
# Ploeh.Autofixture #
####################
snippet afix "new Fixture" b
var fixture = new Fixture();
endsnippet

snippet ac "Create Fixture" b
var ${1:var} = fixture.Create<${2:interface}>();
endsnippet

##############
# nsubstitue #
##############
snippet ssub "Substitute.For" b
var ${1:var} = Substitute.For<${2:interface}>();
endsnippet

snippet sevent "Raise.Event" b
${1:event} += Raise.EventWith(null, System.EventArgs.Empty);
endsnippet

snippet sany "Arg.Any" i
Arg.Any<${1:arg}>()
endsnippet

snippet sis "Arg.Is" i
Arg.Is<${1:arg}>(v => ${2})
endsnippet

snippet sret "Returns" i
Returns(${1});
endsnippet

snippet sreta "ReturnsForAnyArgs" i
ReturnsForAnyArgs(${1});
endsnippet

snippet srec "Received" i
Received()
endsnippet

snippet snrec "DidNotReceived" i
DidNotReceive()
endsnippet


##################
#  full methods  #
##################
snippet equals "Equals method" b
public override bool Equals(object obj) {
	if (obj == null || GetType() != obj.GetType()) {
		return false;
	}
	$0
	return base.Equals(obj);
}
endsnippet

##########
# Usings #
##########
snippet uscg "using Collections.Generic" b
using SCG = System.Collections.Generic;
endsnippet

snippet usub "using NSubstitute" b
using NSubstitute;
endsnippet

snippet ua "using Ploeh" b
using Ploeh.AutoFixture;
endsnippet

snippet ulinq "using Linq" b
using System.Linq;
endsnippet

snippet uunit "using NUnit Framework" b
using NUnit.Framework;
endsnippet

############
# Comments #
############
snippet fix "fix"
// O-FIXME: ${VISUAL}$0
endsnippet
